{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice';\nimport songReducer from './songSlice';\nimport artistReducer from './artistSlice';\nimport userReducer from './userSlice';\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { REHYDRATE } from 'redux-persist';\nfunction isHydrateAction(action) {\n  return action.type === REHYDRATE;\n}\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/'\n  }),\n  // to prevent circular type issues, the return type needs to be annotated as any\n  extractRehydrationInfo(action, {\n    reducerPath\n  }) {\n    if (isHydrateAction(action)) {\n      // when persisting the api reducer\n      if (action.key === 'key used with redux-persist') {\n        return action.payload;\n      }\n      // When persisting the root reducer\n      return action.payload[api.reducerPath];\n    }\n  },\n  endpoints: build => ({\n    // omitted\n    auth: authReducer,\n    users: userReducer,\n    songs: songReducer,\n    artists: artistReducer\n  })\n});\n\n// export default configureStore({\n//     reducer: {\n//         auth: authReducer,\n//         users: userReducer,\n//         songs: songReducer,\n//         artists: artistReducer,\n//     },\n// });","map":{"version":3,"names":["configureStore","authReducer","songReducer","artistReducer","userReducer","createApi","fetchBaseQuery","REHYDRATE","isHydrateAction","action","type","api","baseQuery","baseUrl","extractRehydrationInfo","reducerPath","key","payload","endpoints","build","auth","users","songs","artists"],"sources":["D:/study/React/Spotify-clone/frontend/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from './authSlice';\r\nimport songReducer from './songSlice';\r\nimport artistReducer from './artistSlice';\r\nimport userReducer from './userSlice';\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { REHYDRATE } from 'redux-persist';\r\n\r\nfunction isHydrateAction(action) {\r\n    return action.type === REHYDRATE;\r\n}\r\n\r\nexport const api = createApi({\r\n    baseQuery: fetchBaseQuery({ baseUrl: '/' }),\r\n    // to prevent circular type issues, the return type needs to be annotated as any\r\n    extractRehydrationInfo(action, { reducerPath }) {\r\n        if (isHydrateAction(action)) {\r\n            // when persisting the api reducer\r\n            if (action.key === 'key used with redux-persist') {\r\n                return action.payload;\r\n            }\r\n            // When persisting the root reducer\r\n            return action.payload[api.reducerPath];\r\n        }\r\n    },\r\n    endpoints: (build) => ({\r\n        // omitted\r\n        auth: authReducer,\r\n        users: userReducer,\r\n        songs: songReducer,\r\n        artists: artistReducer,\r\n    }),\r\n});\r\n\r\n// export default configureStore({\r\n//     reducer: {\r\n//         auth: authReducer,\r\n//         users: userReducer,\r\n//         songs: songReducer,\r\n//         artists: artistReducer,\r\n//     },\r\n// });\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,SAAS,QAAQ,eAAe;AAEzC,SAASC,eAAeA,CAACC,MAAM,EAAE;EAC7B,OAAOA,MAAM,CAACC,IAAI,KAAKH,SAAS;AACpC;AAEA,OAAO,MAAMI,GAAG,GAAGN,SAAS,CAAC;EACzBO,SAAS,EAAEN,cAAc,CAAC;IAAEO,OAAO,EAAE;EAAI,CAAC,CAAC;EAC3C;EACAC,sBAAsBA,CAACL,MAAM,EAAE;IAAEM;EAAY,CAAC,EAAE;IAC5C,IAAIP,eAAe,CAACC,MAAM,CAAC,EAAE;MACzB;MACA,IAAIA,MAAM,CAACO,GAAG,KAAK,6BAA6B,EAAE;QAC9C,OAAOP,MAAM,CAACQ,OAAO;MACzB;MACA;MACA,OAAOR,MAAM,CAACQ,OAAO,CAACN,GAAG,CAACI,WAAW,CAAC;IAC1C;EACJ,CAAC;EACDG,SAAS,EAAGC,KAAK,KAAM;IACnB;IACAC,IAAI,EAAEnB,WAAW;IACjBoB,KAAK,EAAEjB,WAAW;IAClBkB,KAAK,EAAEpB,WAAW;IAClBqB,OAAO,EAAEpB;EACb,CAAC;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}