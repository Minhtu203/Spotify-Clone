{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nconst refreshToken = async () => {\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth/refresh', {}, {\n      withCredentials: true\n    });\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const CreateAxios = (user, dispatch, stateSuccess) => {\n  const AxiosInstance = axios.create();\n  AxiosInstance.interceptors.request.use(async config => {\n    const date = new Date();\n    const decodedToken = jwt_decode(user === null || user === void 0 ? void 0 : user.accessToken);\n    if (decodedToken.exp < date.getTime() / 1000) {\n      const data = await refreshToken();\n      const refreshUser = {\n        ...user,\n        accessToken: data.accessToken\n      };\n      dispatch(stateSuccess(refreshUser));\n      config.headers['token'] = `Bearer ${data.accessToken}`;\n    }\n    return config;\n  }, err => {\n    return Promise.reject(err);\n  });\n  return AxiosInstance;\n};\n_c = CreateAxios;\nvar _c;\n$RefreshReg$(_c, \"CreateAxios\");","map":{"version":3,"names":["axios","jwt_decode","refreshToken","res","post","withCredentials","console","log","data","error","CreateAxios","user","dispatch","stateSuccess","AxiosInstance","create","interceptors","request","use","config","date","Date","decodedToken","accessToken","exp","getTime","refreshUser","headers","err","Promise","reject","_c","$RefreshReg$"],"sources":["D:/study/React/Spotify-clone/frontend/src/createAxios.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst refreshToken = async () => {\r\n    try {\r\n        const res = await axios.post(\r\n            'http://localhost:5000/api/auth/refresh',\r\n            {},\r\n            {\r\n                withCredentials: true,\r\n            },\r\n        );\r\n        console.log(res.data);\r\n\r\n        return res.data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const CreateAxios = (user, dispatch, stateSuccess) => {\r\n    const AxiosInstance = axios.create();\r\n    AxiosInstance.interceptors.request.use(\r\n        async (config) => {\r\n            const date = new Date();\r\n            const decodedToken = jwt_decode(user?.accessToken);\r\n            if (decodedToken.exp < date.getTime() / 1000) {\r\n                const data = await refreshToken();\r\n\r\n                const refreshUser = {\r\n                    ...user,\r\n                    accessToken: data.accessToken,\r\n                };\r\n                dispatch(stateSuccess(refreshUser));\r\n                config.headers['token'] = `Bearer ${data.accessToken}`;\r\n            }\r\n            return config;\r\n        },\r\n        (err) => {\r\n            return Promise.reject(err);\r\n        },\r\n    );\r\n    return AxiosInstance;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAEnC,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAI,CACxB,wCAAwC,EACxC,CAAC,CAAC,EACF;MACIC,eAAe,EAAE;IACrB,CACJ,CAAC;IACDC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAACK,IAAI,CAAC;IAErB,OAAOL,GAAG,CAACK,IAAI;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,KAAK;EACzD,MAAMC,aAAa,GAAGd,KAAK,CAACe,MAAM,CAAC,CAAC;EACpCD,aAAa,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,MAAOC,MAAM,IAAK;IACd,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvB,MAAMC,YAAY,GAAGrB,UAAU,CAACU,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,WAAW,CAAC;IAClD,IAAID,YAAY,CAACE,GAAG,GAAGJ,IAAI,CAACK,OAAO,CAAC,CAAC,GAAG,IAAI,EAAE;MAC1C,MAAMjB,IAAI,GAAG,MAAMN,YAAY,CAAC,CAAC;MAEjC,MAAMwB,WAAW,GAAG;QAChB,GAAGf,IAAI;QACPY,WAAW,EAAEf,IAAI,CAACe;MACtB,CAAC;MACDX,QAAQ,CAACC,YAAY,CAACa,WAAW,CAAC,CAAC;MACnCP,MAAM,CAACQ,OAAO,CAAC,OAAO,CAAC,GAAG,UAAUnB,IAAI,CAACe,WAAW,EAAE;IAC1D;IACA,OAAOJ,MAAM;EACjB,CAAC,EACAS,GAAG,IAAK;IACL,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;EAC9B,CACJ,CAAC;EACD,OAAOd,aAAa;AACxB,CAAC;AAACiB,EAAA,GAvBWrB,WAAW;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}