(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types'), require('styled-components'), require('inline-style-prefixer/static')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types', 'styled-components', 'inline-style-prefixer/static'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactSplitPaneNext = {}, global.React, global.PropTypes, global.styled, global.prefixAll));
})(this, (function (exports, React, PropTypes, styled, prefixAll) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
  var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
  var prefixAll__default = /*#__PURE__*/_interopDefaultLegacy(prefixAll);

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var _templateObject$1, _templateObject2$1, _templateObject3;
  var Wrapper = styled__default["default"].div(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  background: #000;\n  opacity: 0;\n  z-index: 1;\n  box-sizing: border-box;\n  background-clip: padding-box;\n  margin: 2px;\n  .hideResizer: {\n    display: none;\n  }\n  :hover {\n    opacity: 0.1;\n  }\n"])));
  var HorizontalWrapper = styled__default["default"](Wrapper)(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n  height: 11px;\n  margin: -5px 0;\n  border-top: 5px solid rgba(255, 255, 255, 0);\n  border-bottom: 5px solid rgba(255, 255, 255, 0);\n  cursor: row-resize;\n  width: 100%;\n\n  :hover {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"])));
  var VerticalWrapper = styled__default["default"](Wrapper)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 11px;\n  margin: 0 -5px;\n  border-left: 5px solid rgba(255, 255, 255, 0);\n  border-right: 5px solid rgba(255, 255, 255, 0);\n  cursor: col-resize;\n\n  :hover {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"])));

  var Resizer = /*#__PURE__*/function (_Component) {
    _inherits(Resizer, _Component);

    var _super = _createSuper(Resizer);

    function Resizer() {
      _classCallCheck(this, Resizer);

      return _super.apply(this, arguments);
    }

    _createClass(Resizer, [{
      key: "render",
      value: function render() {
        var _this = this;

        var _this$props = this.props,
            index = _this$props.index,
            _this$props$split = _this$props.split,
            split = _this$props$split === void 0 ? 'vertical' : _this$props$split,
            _this$props$onClick = _this$props.onClick,
            _onClick = _this$props$onClick === void 0 ? function () {} : _this$props$onClick,
            _this$props$onDoubleC = _this$props.onDoubleClick,
            _onDoubleClick = _this$props$onDoubleC === void 0 ? function () {} : _this$props$onDoubleC,
            _this$props$onMouseDo = _this$props.onMouseDown,
            _onMouseDown = _this$props$onMouseDo === void 0 ? function () {} : _this$props$onMouseDo,
            _this$props$onTouchEn = _this$props.onTouchEnd,
            _onTouchEnd = _this$props$onTouchEn === void 0 ? function () {} : _this$props$onTouchEn,
            _this$props$onTouchSt = _this$props.onTouchStart,
            _onTouchStart = _this$props$onTouchSt === void 0 ? function () {} : _this$props$onTouchSt;

        var props = {
          ref: function ref(_) {
            return _this.resizer = _;
          },
          'data-attribute': split,
          'data-type': 'Resizer',
          onMouseDown: function onMouseDown(event) {
            return _onMouseDown(event, index);
          },
          onTouchStart: function onTouchStart(event) {
            event.preventDefault();

            _onTouchStart(event, index);
          },
          onTouchEnd: function onTouchEnd(event) {
            event.preventDefault();

            _onTouchEnd(event, index);
          },
          onClick: function onClick(event) {
            if (_onClick) {
              event.preventDefault();

              _onClick(event, index);
            }
          },
          onDoubleClick: function onDoubleClick(event) {
            if (_onDoubleClick) {
              event.preventDefault();

              _onDoubleClick(event, index);
            }
          }
        };
        return split === 'vertical' ? /*#__PURE__*/React__default["default"].createElement(VerticalWrapper, props) : /*#__PURE__*/React__default["default"].createElement(HorizontalWrapper, props);
      }
    }]);

    return Resizer;
  }(React.Component);

  function getUnit(size) {
    if (size.endsWith('px')) {
      return 'px';
    }

    if (size.endsWith('%')) {
      return '%';
    }

    return 'ratio';
  }
  function convertSizeToCssValue(value, resizersSize) {
    if (getUnit(value) !== '%') {
      return value;
    }

    if (!resizersSize) {
      return value;
    }

    var idx = value.search('%');
    var percent = value.slice(0, idx) / 100;

    if (percent === 0) {
      return value;
    }

    return "calc(".concat(value, " - ").concat(resizersSize, "px*").concat(percent, ")");
  }
  function convertToUnit(size, unit, containerSize) {
    switch (unit) {
      case '%':
        return "".concat((size / containerSize * 100).toFixed(2), "%");

      case 'px':
        return "".concat(size.toFixed(2), "px");

      case 'ratio':
        return (size * 100).toFixed(0);
    }
  }
  function toPx(value) {
    var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';
    var size = arguments.length > 2 ? arguments[2] : undefined;

    switch (unit) {
      case '%':
        {
          return +(size * value / 100).toFixed(2);
        }

      default:
        {
          return +value;
        }
    }
  }
  function convert(str, size) {
    var tokens = str.match(/([0-9]+)([px|%]*)/);
    var value = tokens[1];
    var unit = tokens[2];
    return toPx(value, unit, size);
  }

  function PaneStyle(_ref) {
    var split = _ref.split,
        initialSize = _ref.initialSize,
        size = _ref.size,
        minSize = _ref.minSize,
        maxSize = _ref.maxSize,
        resizersSize = _ref.resizersSize;
    var value = size || initialSize;
    var vertical = split === 'vertical';
    var styleProp = {
      minSize: vertical ? 'minWidth' : 'minHeight',
      maxSize: vertical ? 'maxWidth' : 'maxHeight',
      size: vertical ? 'width' : 'height'
    };
    var style = {
      display: 'flex',
      outline: 'none'
    };
    style[styleProp.minSize] = convertSizeToCssValue(minSize, resizersSize);
    style[styleProp.maxSize] = convertSizeToCssValue(maxSize, resizersSize);

    switch (getUnit(value)) {
      case 'ratio':
        style.flex = value;
        break;

      case '%':
      case 'px':
        style.flexGrow = 0;
        style[styleProp.size] = convertSizeToCssValue(value, resizersSize);
        break;
    }

    return style;
  }

  var Pane = /*#__PURE__*/function (_PureComponent) {
    _inherits(Pane, _PureComponent);

    var _super = _createSuper(Pane);

    function Pane() {
      var _this;

      _classCallCheck(this, Pane);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "setRef", function (element) {
        _this.props.innerRef(_this.props.index, element);
      });

      return _this;
    }

    _createClass(Pane, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            className = _this$props.className;
        var prefixedStyle = prefixAll__default["default"](PaneStyle(this.props));
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: className,
          style: prefixedStyle,
          ref: this.setRef
        }, children);
      }
    }]);

    return Pane;
  }(React.PureComponent);

  Pane.propTypes = {
    children: PropTypes__default["default"].node,
    innerRef: PropTypes__default["default"].func,
    index: PropTypes__default["default"].number,
    className: PropTypes__default["default"].string,
    initialSize: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
    minSize: PropTypes__default["default"].string,
    maxSize: PropTypes__default["default"].string
  };
  Pane.defaultProps = {
    initialSize: '1',
    split: 'vertical',
    minSize: '0',
    maxSize: '100%'
  };

  var _templateObject, _templateObject2;
  var DEFAULT_PANE_SIZE = '1';
  var DEFAULT_PANE_MIN_SIZE = '0';
  var DEFAULT_PANE_MAX_SIZE = '100%';
  var ColumnStyle = styled__default["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  flex: 1;\n  outline: none;\n  overflow: hidden;\n  user-select: text;\n"])));
  var RowStyle = styled__default["default"].div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  flex-direction: row;\n  flex: 1;\n  outline: none;\n  overflow: hidden;\n  user-select: text;\n"])));

  function removeNullChildren(children) {
    return React__default["default"].Children.toArray(children).filter(function (c) {
      return c;
    });
  }

  var SplitPane = /*#__PURE__*/function (_Component) {
    _inherits(SplitPane, _Component);

    var _super = _createSuper(SplitPane);

    function SplitPane(props) {
      var _this;

      _classCallCheck(this, SplitPane);

      _this = _super.call(this, props);

      _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (event, resizerIndex) {
        if (event.button !== 0) {
          return;
        }

        event.preventDefault();

        _this.onDown(resizerIndex, event.clientX, event.clientY);
      });

      _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (event, resizerIndex) {
        event.preventDefault();
        var _event$touches$ = event.touches[0],
            clientX = _event$touches$.clientX,
            clientY = _event$touches$.clientY;

        _this.onDown(resizerIndex, clientX, clientY);
      });

      _defineProperty(_assertThisInitialized(_this), "onDown", function (resizerIndex, clientX, clientY) {
        var _this$props = _this.props,
            allowResize = _this$props.allowResize,
            onResizeStart = _this$props.onResizeStart;

        if (!allowResize) {
          return;
        }

        _this.resizerIndex = resizerIndex;
        _this.dimensionsSnapshot = _this.getDimensionsSnapshot(_this.props);
        _this.startClientX = clientX;
        _this.startClientY = clientY;
        document.addEventListener('mousemove', _this.onMouseMove);
        document.addEventListener('mouseup', _this.onMouseUp);
        document.addEventListener('touchmove', _this.onTouchMove);
        document.addEventListener('touchend', _this.onMouseUp);
        document.addEventListener('touchcancel', _this.onMouseUp);

        if (onResizeStart) {
          onResizeStart();
        }
      });

      _defineProperty(_assertThisInitialized(_this), "onMouseMove", function (event) {
        event.preventDefault();

        _this.onMove(event.clientX, event.clientY);
      });

      _defineProperty(_assertThisInitialized(_this), "onTouchMove", function (event) {
        event.preventDefault();
        var _event$touches$2 = event.touches[0],
            clientX = _event$touches$2.clientX,
            clientY = _event$touches$2.clientY;

        _this.onMove(clientX, clientY);
      });

      _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (event) {
        event.preventDefault();
        document.removeEventListener('mouseup', _this.onMouseUp);
        document.removeEventListener('mousemove', _this.onMouseMove);
        document.removeEventListener('touchmove', _this.onTouchMove);
        document.removeEventListener('touchend', _this.onMouseUp);
        document.addEventListener('touchcancel', _this.onMouseUp);

        if (_this.props.onResizeEnd) {
          _this.props.onResizeEnd(_this.state.sizes);
        }
      });

      _defineProperty(_assertThisInitialized(_this), "setPaneRef", function (idx, el) {
        if (!_this.paneElements) {
          _this.paneElements = [];
        }

        _this.paneElements[idx] = el;
      });

      _this.state = {
        sizes: _this.getPanePropSize(props)
      };
      return _this;
    }

    _createClass(SplitPane, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState({
          sizes: this.getPanePropSize(nextProps)
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        document.removeEventListener('mouseup', this.onMouseUp);
        document.removeEventListener('mousemove', this.onMouseMove);
        document.removeEventListener('touchmove', this.onTouchMove);
        document.removeEventListener('touchend', this.onMouseUp);
      }
    }, {
      key: "getDimensionsSnapshot",
      value: function getDimensionsSnapshot(props) {
        var split = props.split;
        var paneDimensions = this.getPaneDimensions();
        var splitPaneDimensions = this.splitPane.getBoundingClientRect();
        var minSizes = this.getPanePropMinMaxSize(props, 'minSize');
        var maxSizes = this.getPanePropMinMaxSize(props, 'maxSize');
        var resizersSize = this.getResizersSize(removeNullChildren(this.props.children));
        var splitPaneSizePx = split === 'vertical' ? splitPaneDimensions.width - resizersSize : splitPaneDimensions.height - resizersSize;
        var minSizesPx = minSizes.map(function (s) {
          return convert(s, splitPaneSizePx);
        });
        var maxSizesPx = maxSizes.map(function (s) {
          return convert(s, splitPaneSizePx);
        });
        var sizesPx = paneDimensions.map(function (d) {
          return split === 'vertical' ? d.width : d.height;
        });
        return {
          resizersSize: resizersSize,
          paneDimensions: paneDimensions,
          splitPaneSizePx: splitPaneSizePx,
          minSizesPx: minSizesPx,
          maxSizesPx: maxSizesPx,
          sizesPx: sizesPx
        };
      }
    }, {
      key: "getPanePropSize",
      value: function getPanePropSize(props) {
        return removeNullChildren(props.children).map(function (child) {
          var value = child.props['size'] || child.props['initialSize'];

          if (value === undefined) {
            return DEFAULT_PANE_SIZE;
          }

          return String(value);
        });
      }
    }, {
      key: "getPanePropMinMaxSize",
      value: function getPanePropMinMaxSize(props, key) {
        return removeNullChildren(props.children).map(function (child) {
          var value = child.props[key];

          if (value === undefined) {
            return key === 'maxSize' ? DEFAULT_PANE_MAX_SIZE : DEFAULT_PANE_MIN_SIZE;
          }

          return value;
        });
      }
    }, {
      key: "getPaneDimensions",
      value: function getPaneDimensions() {
        return this.paneElements.filter(function (el) {
          return el;
        }).map(function (el) {
          return el.getBoundingClientRect();
        });
      }
    }, {
      key: "getSizes",
      value: function getSizes() {
        return this.state.sizes;
      }
    }, {
      key: "onMove",
      value: function onMove(clientX, clientY) {
        var _this$props2 = this.props,
            split = _this$props2.split,
            onChange = _this$props2.onChange;
        var resizerIndex = this.resizerIndex;
        var _this$dimensionsSnaps = this.dimensionsSnapshot,
            sizesPx = _this$dimensionsSnaps.sizesPx,
            minSizesPx = _this$dimensionsSnaps.minSizesPx,
            maxSizesPx = _this$dimensionsSnaps.maxSizesPx,
            splitPaneSizePx = _this$dimensionsSnaps.splitPaneSizePx,
            paneDimensions = _this$dimensionsSnaps.paneDimensions;
        var sizeDim = split === 'vertical' ? 'width' : 'height';
        var primary = paneDimensions[resizerIndex];
        var secondary = paneDimensions[resizerIndex + 1];
        var maxSize = primary[sizeDim] + secondary[sizeDim];
        var primaryMinSizePx = minSizesPx[resizerIndex];
        var secondaryMinSizePx = minSizesPx[resizerIndex + 1];
        var primaryMaxSizePx = Math.min(maxSizesPx[resizerIndex], maxSize);
        var secondaryMaxSizePx = Math.min(maxSizesPx[resizerIndex + 1], maxSize);
        var moveOffset = split === 'vertical' ? this.startClientX - clientX : this.startClientY - clientY;
        var primarySizePx = primary[sizeDim] - moveOffset;
        var secondarySizePx = secondary[sizeDim] + moveOffset;
        var primaryHasReachedLimit = false;
        var secondaryHasReachedLimit = false;

        if (primarySizePx < primaryMinSizePx) {
          primarySizePx = primaryMinSizePx;
          primaryHasReachedLimit = true;
        } else if (primarySizePx > primaryMaxSizePx) {
          primarySizePx = primaryMaxSizePx;
          primaryHasReachedLimit = true;
        }

        if (secondarySizePx < secondaryMinSizePx) {
          secondarySizePx = secondaryMinSizePx;
          secondaryHasReachedLimit = true;
        } else if (secondarySizePx > secondaryMaxSizePx) {
          secondarySizePx = secondaryMaxSizePx;
          secondaryHasReachedLimit = true;
        }

        if (primaryHasReachedLimit) {
          secondarySizePx = primary[sizeDim] + secondary[sizeDim] - primarySizePx;
        } else if (secondaryHasReachedLimit) {
          primarySizePx = primary[sizeDim] + secondary[sizeDim] - secondarySizePx;
        }

        sizesPx[resizerIndex] = primarySizePx;
        sizesPx[resizerIndex + 1] = secondarySizePx;
        var sizes = this.getSizes().concat();
        var updateRatio;
        [primarySizePx, secondarySizePx].forEach(function (paneSize, idx) {
          var unit = getUnit(sizes[resizerIndex + idx]);

          if (unit !== 'ratio') {
            sizes[resizerIndex + idx] = convertToUnit(paneSize, unit, splitPaneSizePx);
          } else {
            updateRatio = true;
          }
        });

        if (updateRatio) {
          var ratioCount = 0;
          var lastRatioIdx;
          sizes = sizes.map(function (size, idx) {
            if (getUnit(size) === 'ratio') {
              ratioCount++;
              lastRatioIdx = idx;
              return convertToUnit(sizesPx[idx], 'ratio');
            }

            return size;
          });

          if (ratioCount === 1) {
            sizes[lastRatioIdx] = '1';
          }
        }

        onChange && onChange(sizes);
        this.setState({
          sizes: sizes
        });
      }
    }, {
      key: "getResizersSize",
      value: function getResizersSize(children) {
        return (children.length - 1) * this.props.resizerSize;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props3 = this.props,
            className = _this$props3.className,
            split = _this$props3.split;
        var notNullChildren = removeNullChildren(this.props.children);
        var sizes = this.getSizes();
        var resizersSize = this.getResizersSize(notNullChildren);
        var elements = notNullChildren.reduce(function (acc, child, idx) {
          var pane;
          var resizerIndex = idx - 1;
          var isPane = child.type === Pane;
          var paneProps = {
            index: idx,
            'data-type': 'Pane',
            split: split,
            key: "Pane-".concat(idx),
            innerRef: _this2.setPaneRef,
            resizersSize: resizersSize,
            size: sizes[idx]
          };

          if (isPane) {
            pane = /*#__PURE__*/React.cloneElement(child, paneProps);
          } else {
            pane = /*#__PURE__*/React__default["default"].createElement(Pane, paneProps, child);
          }

          if (acc.length === 0) {
            return [].concat(_toConsumableArray(acc), [pane]);
          } else {
            var resizer = /*#__PURE__*/React__default["default"].createElement(Resizer, {
              index: resizerIndex,
              key: "Resizer-".concat(resizerIndex),
              split: split,
              onMouseDown: _this2.onMouseDown,
              onTouchStart: _this2.onTouchStart
            });
            return [].concat(_toConsumableArray(acc), [resizer, pane]);
          }
        }, []);
        var StyleComponent = split === 'vertical' ? RowStyle : ColumnStyle;
        return /*#__PURE__*/React__default["default"].createElement(StyleComponent, {
          className: className,
          "data-type": "SplitPane",
          "data-split": split,
          ref: function ref(el) {
            _this2.splitPane = el;
          }
        }, elements);
      }
    }]);

    return SplitPane;
  }(React.Component);

  SplitPane.propTypes = {
    children: PropTypes__default["default"].arrayOf(PropTypes__default["default"].node).isRequired,
    className: PropTypes__default["default"].string,
    split: PropTypes__default["default"].oneOf(['vertical', 'horizontal']),
    resizerSize: PropTypes__default["default"].number,
    onChange: PropTypes__default["default"].func,
    onResizeStart: PropTypes__default["default"].func,
    onResizeEnd: PropTypes__default["default"].func
  };
  SplitPane.defaultProps = {
    split: 'vertical',
    resizerSize: 1,
    allowResize: true
  };

  exports.Pane = Pane;
  exports["default"] = SplitPane;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
